openapi: 3.0.0
info:
  title: PP-Label API Spec
  version: 0.1.0
  description: Back end APIs for PP-Label
  contact:
    name: PP-Label Team
    url: 'https://github.com/PaddleCV-SIG/PP-Label/issues'
    email: me@linhan.email
servers:
  - url: 'http://localhost:5000/api'
    description: Local server
paths:
  /projects:
    parameters:
      - $ref: '#/components/parameters/request_id'
    get:
      tags:
        - Project
      summary: 'Read all projects, sort by last modify date'
      description: ''
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags:
        - Project
      summary: Create a new project
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  '/projects/{project_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/request_id'
    get:
      tags:
        - Project
      summary: Get info of a specific project
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not fond
    delete:
      summary: Delete a project record and ALL TASKS RECORDS under the project.
      description: Delete a project record and ALL TASKS RECORDS under the project. Won't delete file on file system
      tags:
        - Project
      responses:
        '200':
          description: OK
        '404':
          description: No project with such project id
    put:
      tags:
        - Project
      summary: Edit multiple project properties
      description: Edit multiple project properties. Empty strings will be set. Properties not in request body won't be changed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: 'Project with project id not fond, or project dont have requested property'
  '/projects/{project_id}/tasks':
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      summary: Your GET endpoint
      tags:
        - Project
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      operationId: pplabel.api.controller.task.get_by_project
  '/projects/{project_id}/labels':
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      summary: Your GET endpoint
      tags:
        - Project
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
      operationId: pplabel.api.controller.label.get_by_project
  '/projects/{project_id}/annotations':
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      summary: Your GET endpoint
      tags:
        - Project
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
      operationId: pplabel.api.controller.annotation.get_by_project
  '/projects/{project_id}/tags':
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      summary: Your GET endpoint
      tags:
        - Project
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      operationId: pplabel.api.controller.tag.get_by_project
      description: ''
  /labels:
    get:
      tags:
        - Label
      summary: 'Read all labels, sort by last modify date'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
    post:
      tags:
        - Label
      summary: Create a new label
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
      parameters:
        - $ref: '#/components/parameters/request_id'
  '/labels/{label_id}':
    parameters:
      - $ref: '#/components/parameters/label_id'
    get:
      tags:
        - Label
      summary: Get info about a specific label
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '404':
          description: Label not fond
    delete:
      summary: Delete a label
      description: Delete a label. Labels in use (have annotation pointing at them) are not allowed to be deleted.
      tags:
        - Label
      responses:
        '200':
          description: OK
        '404':
          description: The label specified is not found
    put:
      tags:
        - Label
      summary: Edit label info
      description: Edit label info. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '404':
          description: 'Label with specified label id not fond, or project dont have requested property'
  /tasks:
    get:
      summary: Your GET endpoint
      tags:
        - Task
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      tags:
        - Task
      summary: Create a new task
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  '/tasks/{task_id}':
    parameters:
      - $ref: '#/components/parameters/task_id'
    get:
      tags:
        - Task
      summary: Get info of a specific task
      parameters:
        - name: task_id
          in: path
          description: Id of the task
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not fond
    delete:
      summary: Delete a task and ALL DATA and ANNOTATIONS under the task.
      description: Delete a task and ALL DATA and ANNOTATIONS under the project. Won't delete file on file system
      tags:
        - Task
      parameters:
        - name: task_id
          in: path
          description: Id of the task to delete
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: The task specified is not found
    put:
      tags:
        - Task
      summary: Edit task info
      description: Edit task info. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.
      parameters:
        - name: task_id
          in: path
          description: Id of the task to edit
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: 'Task with task id not fond, or task dont have requested property'
  '/tasks/{task_id}/tags':
    parameters:
      - $ref: '#/components/parameters/task_id'
    get:
      tags:
        - Tag
      summary: Get all tags of the task
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      operationId: pplabel.api.controller.tag.get_by_task
    post:
      tags:
        - Tag
      summary: Add a new tag to the task
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      parameters:
        - $ref: '#/components/parameters/request_id'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                tag_id:
                  type: integer
      operationId: pplabel.api.controller.tag.add_to_task
  /datas/:
    get:
      tags:
        - Data
      summary: 'Get all data, sort by last modified'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
    post:
      tags:
        - Data
      summary: Create a new data record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
  /datas/{data_id}/:
    parameters:
      - $ref: '#/components/parameters/data_id'
    get:
      tags:
        - Data
      summary: Get info of a specific data record
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Data record not fond
    delete:
      summary: Delete a data record
      description: 'Delete a data record, file on file system will not be deleted'
      tags:
        - Data
      responses:
        '200':
          description: OK
        '404':
          description: The data record specified is not found
    put:
      tags:
        - Data
      summary: Edit data record
      description: Edit data record. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: 'Data record with data id not fond, or data dont have requested property'
  /datas/{data_id}/image':
    parameters:
      - $ref: '#/components/parameters/data_id'
    get:
      summary: Get the image of a data record
      tags:
        - Data
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
      operationId: pplabel.api.controller.data.get_image
  /annotations/:
    get:
      tags:
        - Annotation
      summary: 'Get all annotations, sort by last modified'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
    post:
      tags:
        - Annotation
      summary: Create a new annotation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
      parameters:
        - $ref: '#/components/parameters/request_id'
  '/annotations/{annotation_id}':
    get:
      tags:
        - Annotation
      summary: Get info of a specific annotation
      parameters:
        - name: annotation_id
          in: path
          description: Id of the annotation
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '404':
          description: Annotation not fond
    delete:
      summary: Delete an annotation
      description: Delete an annotation
      tags:
        - Annotation
      parameters:
        - name: annotation_id
          in: path
          description: Id of the annotation to delete
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: The annotation record specified is not found
    put:
      tags:
        - Annotation
      summary: Edit annotation
      description: Edit annotation. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.
      parameters:
        - name: annotation_id
          in: path
          description: Id of the annotation to edit
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '404':
          description: 'Annotation record with data id not fond, or data dont have requested property'
    parameters:
      - name: annotation_id
        in: path
        required: true
        schema:
          type: string
        description: Id of an annotation record
  /tags:
    get:
      tags:
        - Tag
      summary: 'Get all tags, sort by last modify date'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      tags:
        - Tag
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - $ref: '#/components/parameters/request_id'
      description: ''
  '/tags/{tag_id}':
    parameters:
      - $ref: '#/components/parameters/tag_id'
    get:
      tags:
        - Tag
      summary: Get info of a specific tag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: Tag not fond
    delete:
      summary: Delete a tag and ALL TAGGING RECORDS under this tag.
      description: Delete a tag and ALL TAGGING RECORDS under this tag.
      tags:
        - Tag
      responses:
        '200':
          description: OK
        '404':
          description: The tag specified is not found
    put:
      tags:
        - Tag
      summary: Edit tag properties
      description: Edit tag properties. Empty strings will be set. Properties not in request body won't be changed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: 'Tag with tag id not fond, or tag dont have requested property'
  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Add a new user
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: ''
  '/users/{uuid}':
    parameters:
      - $ref: '#/components/parameters/uuid'
    get:
      tags:
        - User
      summary: Get info of a specific user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not fond
      description: ''
    delete:
      summary: Delete a user
      description: Delete a user
      tags:
        - User
      responses:
        '200':
          description: OK
        '404':
          description: The task specified is not found
    put:
      tags:
        - User
      summary: Edit user info
      description: Edit user info.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'Use with user id not fond, or user dont have requested property'
  /users/login:
    post:
      tags:
        - User
      summary: Login and get JWT
      operationId: pplabel.api.controller.user.login
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: pplabel.api.decode_token
  schemas:
    Project:
      type: object
      description: Contains project details and settings
      x-examples:
        Classification_Example:
          project_id: null
          name: Classification Example
          description: Example Project Descreption
          task_category: 1
          data_dir: ~/pplabel/project_name/data
          label_dir: ~/pplabel/project_name/label
          label_config: '[''class1'', ''class2'', ''class3'']'
          created: null
          modified: null
          other_settings: '{''multiclass_classification'':true}'
      additionalProperties: false
      properties:
        project_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 64
          description: Project name
        description:
          type: string
          description: Optional project description
        task_category_id:
          type: integer
          description: 'Top level annotation task category, see TODO for int <-> category map'
        task_category:
          type: string
          readOnly: true
        data_dir:
          type: string
          description: Absolute directory path where all the data file is stored
        label_dir:
          type: string
          description: Absolute directory path where all the label files are stored
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        created:
          type: string
          description: Project creation timestamp in UTC
          format: timestamp
          nullable: true
          readOnly: true
        modified:
          type: string
          description: Last time the project detail or ANY TASK of the project is modified
          format: timestamp
          nullable: true
          readOnly: true
        other_settings:
          type: string
          description: Project settings that are different across annotation task categories
    Task:
      title: Task
      type: object
      description: An annotation task
      additionalProperties: false
      properties:
        task_id:
          type: integer
          readOnly: true
        project_id:
          type: integer
        datas:
          type: array
          items:
            type: string
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        project:
          $ref: '#/components/schemas/Project'
        modified:
          type: string
          format: timestamp
          readOnly: true
        created:
          type: string
          format: timestamp
          readOnly: true
      required:
        - project_id
    Data:
      title: Data
      type: object
      properties:
        data_id:
          type: integer
          readOnly: true
        task_id:
          type: integer
        path:
          type: string
        slice_count:
          type: integer
        task:
          $ref: '#/components/schemas/Task'
        created:
          type: string
          readOnly: true
        modified:
          type: string
          readOnly: true
      required:
        - path
    Annotation:
      type: object
      title: Annotation
      description: ''
      additionalProperties: false
      properties:
        annotation_id:
          type: integer
          readOnly: true
        task_id:
          type: integer
        label_id:
          type: integer
        label:
          $ref: '#/components/schemas/Label'
        project_id:
          type: string
        result:
          type: string
        slice_id:
          type: integer
        created:
          type: string
          readOnly: true
        modified:
          type: string
          readOnly: true
    Label:
      title: Label
      type: object
      description: ''
      properties:
        label_id:
          type: integer
          readOnly: true
        id:
          type: integer
        project_id:
          type: integer
        name:
          type: string
        color:
          type: string
        comment:
          type: string
        created:
          type: string
          readOnly: true
        modified:
          type: string
          readOnly: true
        super_category_id:
          type: integer
      required:
        - name
    Tag:
      title: Tag
      type: object
      properties:
        tag_id:
          type: integer
        project_id:
          type: integer
        name:
          type: string
        color:
          type: string
        comment:
          type: string
    TagTask:
      title: TagTask
      type: object
      properties:
        tag_task_id:
          type: integer
        project_id:
          type: integer
        tag_id:
          type: integer
        task_id:
          type: integer
    User:
      title: User
      type: object
      description: ''
      properties:
        user_id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role_id:
          type: integer
  parameters:
    request_id:
      name: request_id
      in: header
      required: false
      schema:
        type: string
        maxLength: 30
      description: 'Assign a unique random string each request, backend will reject requests with same request_id within several seconds. Prevent critical operations (mostly post) from executing multiple times'
    project_id:
      name: project_id
      in: path
      schema:
        type: string
      description: Id of a project
      required: true
    label_id:
      name: label_id
      in: path
      required: true
      schema:
        type: string
      description: Id of a label
    task_id:
      name: task_id
      in: path
      required: true
      schema:
        type: string
      description: Id of a task
    data_id:
      name: data_id
      in: path
      required: true
      schema:
        type: string
      description: Id of a data record
    annotation_id:
      name: annotation_id
      in: path
      required: true
      schema:
        type: string
      description: Id of an annotation record
    tag_id:
      name: tag_id
      in: path
      required: true
      schema:
        type: string
      description: Id of a tag
    uuid:
      name: uuid
      in: path
      required: true
      schema:
        type: string
      description: Unique id of user
