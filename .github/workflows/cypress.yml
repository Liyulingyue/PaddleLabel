name: E2E Tests

on:
  workflow_call:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build PaddleLabel package"]
    branches: [develop]
    types:
      - completed
  schedule:
    - cron: "0 12 * * *"

jobs:
  # only rebuild if files under doc/ folder changed
  e2e_test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        node-version: ["19.x"]

        # python-version: ["3.11", "3.10", "3.9", "3.8"]
        os: [ubuntu-latest, windows-latest, macos-12]

        python-version: ["3.11"]
        # os: [ubuntu-latest]

      fail-fast: false

    steps:
      - name: Checkout backend
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # cache: "pip"

      # - name: Random sleep up to 10 s
      #   run: sleep $[$RANDOM % 10]

      - name: Download PaddleLabel whl package
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          name: PaddleLabel_built_package
          search_artifacts: true
          path: ../

      - name: Add cn path
        run: |
          cd
          pwd
          echo $USER
          mkdir 测试路径
          mkdir 测试路径/3rd_party
          cd 测试路径
          pwd
      # - name: Download 3rd party test job
      #   run: |
      #     echo "
      #       cd ~/测试路径/3rd_party/
      #       pip install requests
      #       python -c "import requests; file = requests.get('https://github.com/linhandev/static/releases/download/PaddleLabel%E7%9B%B8%E5%85%B3/paddlelabel_3rd_party_tests.zip'); open('paddlelabel_3rd_party_tests.zip', 'wb').write(file.content)"
      #       unzip -q paddlelabel_3rd_party_tests.zip
      #     " >> down.sh
      - name: Parallel - install paddlelabel, download 3rd party test
        uses: sambacha/parallelish@v1.0.0
        with:
          cmd1: cat <<EOF | bash
            cd ~/测试路径/3rd_party/
            pip install requests
            python -c "import requests; file = requests.get('https://github.com/linhandev/static/releases/download/PaddleLabel%E7%9B%B8%E5%85%B3/paddlelabel_3rd_party_tests.zip'); open('paddlelabel_3rd_party_tests.zip', 'wb').write(file.content)"
            unzip -q paddlelabel_3rd_party_tests.zip
            EOF
          cmd2: pip install ../paddlelabel-*-py3-none-any.whl

      # - name: Download 3rd party tests
      #   run: |
      #     cd ~/测试路径/3rd_party/
      #     pip install requests
      #     python -c "import requests; file = requests.get('https://github.com/linhandev/static/releases/download/PaddleLabel%E7%9B%B8%E5%85%B3/paddlelabel_3rd_party_tests.zip'); open('paddlelabel_3rd_party_tests.zip', 'wb').write(file.content)"
      #     unzip -q paddlelabel_3rd_party_tests.zip

      # - name: Install PaddleLabel
      #   run: |
      #     pip uninstall paddlelabel
      #     pip install ../paddlelabel-*-py3-none-any.whl

      - name: Start PaddleLabel
        run: |
          HOME=~/测试路径/ paddlelabel --debug --port 1111 --lan &

      - name: Checkout frontend project
        uses: actions/checkout@v3
        with:
          repository: PaddleCV-SIG/PaddleLabel-Frontend
          ref: paddlelablOcr

      - name: Setup node env
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          cache-dependency-path: "cypress/package.json"

      - name: Install js deps
        run: |
          cd cypress
          yarn

      - name: Run test
        id: test
        run: |
          cd cypress

          # Xvfb :99 &
          # https://docs.cypress.io/guides/continuous-integration/introduction#Xvfb
          # Xvfb -screen 0 1024x768x24 :99 &
          # DISPLAY=:99 npx cypress run \ ...
          # bgpid=$(jobs -l | grep cypress | awk '{print $2}')

          npx cypress run \
          --browser chrome \
          --config baseUrl=http://localhost:1111 \
          --env os=${{ matrix.os }} \

      # - run: tree ./cypress/cypress/

      - name: Upload screenshots and videos
        if: always() && steps.test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: Cypress_test_recs_${{ matrix.os }}_${{ matrix.python-version }}
          path: |
            ./cypress/cypress/
